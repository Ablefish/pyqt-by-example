==========================
PyQt By Example: Session 5
==========================

~~~~~~
Dialog
~~~~~~

Requirements
============

If you have not done it yet, please check the previous sessions:
    
* `Session 1`_

* `Session 2`_

* `Session 3`_

* `Session 4`_

All files for this session are here: `Session 5 at GitHub`_. You can use them, or you can follow these instructions starting with the files from `Session 4`_ and see how well you worked!

Dialog
======

When we finished `session 4`_ we had a TODO application that was able of displaying your task list, and deleting a task, and had the proper UI for that.

.. figure:: window6.png

   A very limited application

The obvious missing pieces are creating and modifying tasks, and that's what we will be implementing today.

But first, let's consider a course of action, because there are several different ways to do this, and trying to implement something you have not thought about sucks.

Inline Editing
~~~~~~~~~~~~~~

When the user clicks (or double-clicks?) on a task, he could start editing the task properties in the task item itself.

Examples of this model of interaction include:
    
* Spreadsheets

* File renaming in some file managers

* Todo lists in some websites

The good: 

    * Minimal user interface.
    
    * Obvious if the user knows about it.
    
    * Direct manipulation of the task item is a good metaphor.
    
    * Works well in small screens (netbooks, phones)
    
The bad:
    
    * It's not trivial to implement, for example, a due date/time editor this way (feel free to prove me wrong ;-)
    
    * I don't like it much for task addition. Using this paradigm usually means you create   a task using placeholders like "New Task" and then need to edit it. I prefer if the user creates the tasks "fully fledged".
    

So, maybe it's a good idea to implement this, but I am fully convinced.

Editor Dialog
~~~~~~~~~~~~~

When the user triggers the "edit task" action, a dialog pops up where he can set the task's properties.

Examples of this model of interaction:
    
* File properties in most file managers.

* Configuration dialogs in most applications.

The good:
    
    * A separate dialog allows use of a richer UI, because you are not limited by the small space used for inline editing.
    
    * The same dialog can be used for task creating with minimal changes.
    
    * It would let me show you how to create a proper dialog ;-)

The bad:
    
    * Breaks the metaphor. Only do that `when it makes sense`_
    
    * Popup dialogs often obscure the main window. Then if you need to check a date from another task, you need to move the dialog aside.
    
    * Old fashioned?
    
All in all, not a fan of this option as the main mechanism for task editing.

Sliding Panels
~~~~~~~~~~~~~~
    
This is a more modern interaction model: when a task editing action is triggered, a gadget slides into view from one of the window edges, containing the editing widgets.

Examples of this interaction:
    
* Firefox's search dialog (Thankfully many apps are using this now, popup search dialogs suck)

* Boxee's menu

* Some phone interfaces

The good:
    
    * Rich UI like in a dialog
    
    * No popups (Modern?)
    
    * Works for adding tasks as well.
    
The bad:
    
    * Could be confusing?

    * Could not work great in small screens (needs testing!)
    
    * If the main window's form factor is small (as it is for this app), a large panel will obscure most or all the window.
    
I think I like this option best, but I am not exactly overcome with enthusiasm. It should also work well as a teaching aid, since we will need to learn to do many things to make it work correctly!

Anyway: if you prefer another approach for this task, you can probably reuse some of the code, and I will be happy to present your alternative implementations here, so go ahead and code them!

Creating the Form
-----------------

As usual when we do UI work, we start with designer. This time, we will not create a Main Window, but a Widget, and laying out the necessary widgetry. Just put them roughly where you think they should go, here is how I started:
    
.. figure:: editor1.png

   Just a draft
    
What we are creating here is a classical two-column form: labels on the left, widgets on the right. Almost every program has one of these!

The main goals are (in no particular order):
    
1. It should react nicely to resizing.

2. It should not look weird. On any platform, if you can do it.

3. The purpose of each thing in the screen should be obvious.

4. It should be usable by keyboard and mouse.

And here's some steps towards those goals:
    
Layouts
~~~~~~~

1. You can think of this form as a a 2x3 grid. 
   Group things that go in a single cell using a layout. In our case, the calendar and the time editor should be in a vertical layout (Just click one, shift-click the other, and then click on "Lay Out Vertically" in the tool bar)
    
2. Select the contents of each "cell" and put them in a form layout. 

   There are other ways to do this, like using a grid layout. Use a form layout instead, because it will look correct (or at least *more* correct) on other platforms which have rules like "align the labels left" or "align the labels right".
   
   .. figure:: editor6.png
   
      No form layout is **always** right...

3. Right-click on the background and lay out the contents of the widget vertically.

.. figure:: editor2.png

   You can see the layouts outlined in red
   
Keyboard Handling
~~~~~~~~~~~~~~~~~

1. Configure buddies_. This associates a label to a widget. It's very important, because then you can do the next item ;-)

   .. figure:: editor3.png
   
      Buddies.

2. Add shortcuts to the labels. If you change "Due Date" for "&Due Date", the "D" will be underlined and Alt-D will jump to the date editor. If a label is not a buddy for a widget, this does not work!

   .. figure:: editor4.png
   
      Shortcuts.

3. `Tab order`_. Usually, you want the tab order to just be the top-to-bottom order of your widgets. That is usually the `least surprising`_ option.

   .. figure:: editor5.png
   
      Tab order.
      
Miscelaneous
~~~~~~~~~~~~

Some chores:

1. Change the object names for the important widgets (that is, not for the labels).

2. Tweak attributes (if you have a good reason!)

3. Test it in different styles, see if aything bad happens

4. Add compiling editor.ui_ to our build.sh_


.. _editor.ui: http://github.com/ralsina/pyqt-by-example/blob/master/session5/editor.ui

.. _build.sh: http://github.com/ralsina/pyqt-by-example/blob/master/session5/build.sh

.. _least surprising: http://en.wikipedia.org/wiki/Principle_of_least_astonishment

.. _tab order: http://doc.trolltech.com/4.4/designer-tab-order.html

.. _buddies: http://doc.trolltech.com/4.4/designer-buddy-mode.html
    
.. _when it makes sense: http://dot.kde.org/2004/09/27/kcalc-modest-usability-improvement

.. _Session 5 at GitHub: http://github.com/ralsina/pyqt-by-example/tree/master/session4 

.. _Session 1: http://lateral.netmanagers.com.ar/stories/BBS47.html

.. _Session 2: http://lateral.netmanagers.com.ar/stories/BBS48.html

.. _Session 3: http://lateral.netmanagers.com.ar/stories/BBS49.html

.. _Session 4: http://lateral.netmanagers.com.ar/stories/BBS50.html
